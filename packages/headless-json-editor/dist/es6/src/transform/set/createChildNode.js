import{isJSONError,isNode}from"../../types";import{create}from"../../node/create";import{invalidPathError}from"../../errors";import{getSchemaOfChild}from"./getSchemaOfChild";function isNumber(r){return`${parseInt(r)}`===r}export function createChildNode(r,e,t,o){if("array"===e.type&&!isNumber(t))return invalidPathError({pointer:e.pointer,reason:`child property '${t}' to array is not a number`,where:"resolving target node in transform.set"});const i=getSchemaOfChild(r,e,t,o);if(isJSONError(i))return i;const n=[],a="object"===e.type?e.children.length:t;return isNode(e.children[a])&&n.push({type:"delete",node:e.children[a]}),e.children[a]=create(r,o,i,`${e.pointer}/${t}`),n.push({type:"create",node:e.children[a]}),n}