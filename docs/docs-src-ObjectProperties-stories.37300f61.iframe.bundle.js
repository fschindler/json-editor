"use strict";(self.webpackChunkjson_editor=self.webpackChunkjson_editor||[]).push([[5899],{"./packages/docs/src/ObjectProperties.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AddOptionalProps:()=>AddOptionalProps,AdditionalProperties:()=>AdditionalProperties,AdditionalPropertiesFalse:()=>AdditionalPropertiesFalse,AdditionalPropertiesSchema:()=>AdditionalPropertiesSchema,AllOf:()=>AllOf,AllOfIfThen:()=>AllOfIfThen,Dependencies:()=>Dependencies,DependenciesActive:()=>DependenciesActive,DependenciesList:()=>DependenciesList,DependenciesListActive:()=>DependenciesListActive,EditJson:()=>EditJson,IfThenElse:()=>IfThenElse,IfThenElseActive:()=>IfThenElseActive,IfThenElseSwitch:()=>IfThenElseSwitch,InitialOptionalProperty:()=>InitialOptionalProperty,InvalidOneOfObject:()=>InvalidOneOfObject,OneOfObject:()=>OneOfObject,OneOfProperty:()=>OneOfProperty,OptionalProperties:()=>OptionalProperties,RequiredProperties:()=>RequiredProperties,TypedOneOfObject:()=>TypedOneOfObject,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={component:__webpack_require__("./packages/rje-widgets/src/index.ts").R_},OptionalProperties={args:{theme:"light",schema:{type:"object",properties:{optionalProperty:{title:"Optional property",type:"string"}}}}},InitialOptionalProperty={args:{theme:"light",data:{optionalProperty:"input data"},schema:{type:"object",properties:{optionalProperty:{title:"Optional property",type:"string"}}}}},AddOptionalProps={args:{theme:"light",addOptionalProps:!0,schema:{title:"addOptionalProps: true",type:"object",properties:{optionalProperty:{title:"Optional property",type:"string"}}}}},RequiredProperties={args:{theme:"light",schema:{title:"required: [ property ]",type:"object",required:["requiredProperty"],properties:{requiredProperty:{title:"Required Property",type:"string"},optionalProperty:{title:"Optional Property",type:"string"}}}}},AdditionalProperties={args:{theme:"light",data:{additionalProperty:"property without schema"},schema:{type:"object"}}},AdditionalPropertiesFalse={args:{theme:"light",data:{additionalProperty:"property without schema"},schema:{title:"additionalProperties: false",type:"object",additionalProperties:!1}}},AdditionalPropertiesSchema={args:{theme:"light",data:{additionalProperty:"property without schema"},validate:!0,schema:{title:"additionalProperties: { maxLength }",type:"object",additionalProperties:{type:"string",maxLength:10}}}},EditJson={args:{theme:"light",data:{additionalProperty:"property without schema"},schema:{type:"object",title:"options: { editJson: { enabled: true } }",description:"Using an object with a title will switch actions for optional properties to be placed in the actions-icon besides its title. Inline delete options are moved into their panel for a cleaner ui. Using EditJson action from the actions panel will allow the user to add additional data in json format.",options:{editJson:{enabled:!0}},additionalProperties:{type:"string"}}}},OneOfObject={args:{theme:"light",schema:{oneOf:[{type:"object",title:"First Option",required:["one"],properties:{one:{type:"string",title:"Property String"}}},{type:"object",title:"Second Option",required:["one"],properties:{one:{type:"number",title:"Property Number"}}}]}}},InvalidOneOfObject={args:{theme:"light",data:{one:"input data"},schema:{oneOf:[{type:"object",title:"First Option",required:["one"],properties:{one:{type:"string",title:"Property One"}}},{type:"object",title:"Unselectable Second Option",required:["one"],properties:{one:{type:"string",title:"Property Two"}}}]}}},TypedOneOfObject={args:{theme:"light",schema:{oneOf:[{type:"object",title:"Select A",required:["id","one"],properties:{id:{type:"string",const:"A"},one:{type:"string",title:"Property ID A"}}},{type:"object",title:"Select B",required:["id","one"],properties:{id:{type:"string",const:"B"},one:{type:"string",title:"Property ID B"}}}]}}},OneOfProperty={args:{theme:"light",data:{id:"B",one:"B"},schema:{oneOfProperty:"id",oneOf:[{type:"object",title:"Select A",required:["id","one"],properties:{id:{type:"string",const:"A",options:{hidden:!0}},one:{type:"string",title:"Property ID A"}}},{type:"object",title:"Select B",required:["id","one"],properties:{id:{type:"string",const:"B",options:{hidden:!0}},one:{type:"string",minLength:2,title:"Property ID B"}}}]}}},AllOf={args:{theme:"light",validate:!0,liveUpdate:!0,data:{title:"five!"},schema:{type:"object",options:{title:!1},required:["title"],properties:{title:{type:"string"}},allOf:[{properties:{title:{minLength:1}}},{properties:{title:{default:"title",minLength:6}}}]}}},AllOfIfThen={args:{theme:"light",validate:!0,liveUpdate:!0,schema:{type:"object",options:{title:!1},properties:{title:{type:"string",default:"four"}},allOf:[{if:{type:"object",required:["title"],properties:{title:{minLength:4}}},then:{properties:{title:{pattern:"^[0-9]+$",patternExample:"a string with a length of 4+ should contain only numbers"}}}}]}}},DependenciesList={args:{theme:"light",schema:{title:'dependencies: { prop: ["prop"] }',type:"object",properties:{one:{title:"Property One",type:"string"},two:{title:"dependency",type:"string"}},dependencies:{one:["two"]},options:{title:!1}}}},DependenciesListActive={args:{theme:"light",data:{one:"input value"},addOptionalProps:!1,schema:{title:'dependencies: { prop: ["prop"] }',type:"object",required:["one"],properties:{one:{title:"Property One",type:"string"},two:{title:"dependency",type:"string"}},dependencies:{one:["two"]},options:{title:!1}}}},Dependencies={args:{theme:"light",addOptionalProps:!1,schema:{title:"dependencies: { prop: { schema } }",type:"object",properties:{one:{title:"Property One",type:"string"}},dependencies:{one:{required:["two"],properties:{two:{title:"dependency",type:"string"}}}},options:{title:!1}}}},DependenciesActive={args:{theme:"light",addOptionalProps:!1,schema:{title:"dependencies: { prop: { schema } }",type:"object",required:["one"],properties:{one:{title:"Property One",type:"string"}},dependencies:{one:{required:["two"],properties:{two:{title:"dependency",type:"string"}}}},options:{title:!1}}}},IfThenElse={args:{theme:"light",addOptionalProps:!1,schema:{type:"object",required:["trigger"],properties:{trigger:{title:"Trigger",type:"boolean",default:!1}},if:{required:["trigger"],properties:{trigger:{const:!0}}},then:{properties:{addition:{type:"string"}}},options:{title:!1}}}},IfThenElseActive={args:{theme:"light",addOptionalProps:!1,schema:{type:"object",required:["trigger"],properties:{trigger:{title:"Trigger",type:"boolean",default:!1}},if:{required:["trigger"],properties:{trigger:{const:!0}}},then:{required:["addition"],properties:{addition:{type:"string"}}},options:{title:!1}}}},IfThenElseSwitch={args:{theme:"light",addOptionalProps:!1,validate:!0,schema:{type:"object",required:["switch"],additionalProperties:!1,properties:{switch:{title:"Switch",type:"boolean",default:!1}},if:{required:["switch"],properties:{switch:{const:!1}}},then:{required:["then","number"],properties:{then:{title:"Then statement",type:"string"},number:{title:"Value in Then",type:"number",minimum:4}}},else:{required:["else","number"],properties:{else:{title:"Else statement",type:"string",enum:["option a","option b"]},number:{title:"Value in Else",type:"number",maximum:4}}},options:{title:!1}}}},__namedExportsOrder=["OptionalProperties","InitialOptionalProperty","AddOptionalProps","RequiredProperties","AdditionalProperties","AdditionalPropertiesFalse","AdditionalPropertiesSchema","EditJson","OneOfObject","InvalidOneOfObject","TypedOneOfObject","OneOfProperty","AllOf","AllOfIfThen","DependenciesList","DependenciesListActive","Dependencies","DependenciesActive","IfThenElse","IfThenElseActive","IfThenElseSwitch"];OptionalProperties.parameters={...OptionalProperties.parameters,docs:{...OptionalProperties.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    schema: {\n      type: 'object',\n      properties: {\n        optionalProperty: {\n          title: 'Optional property',\n          type: 'string'\n        }\n      }\n    }\n  }\n}",...OptionalProperties.parameters?.docs?.source}}},InitialOptionalProperty.parameters={...InitialOptionalProperty.parameters,docs:{...InitialOptionalProperty.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    data: {\n      optionalProperty: 'input data'\n    },\n    schema: {\n      type: 'object',\n      properties: {\n        optionalProperty: {\n          title: 'Optional property',\n          type: 'string'\n        }\n      }\n    }\n  }\n}",...InitialOptionalProperty.parameters?.docs?.source}}},AddOptionalProps.parameters={...AddOptionalProps.parameters,docs:{...AddOptionalProps.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    addOptionalProps: true,\n    schema: {\n      title: 'addOptionalProps: true',\n      type: 'object',\n      properties: {\n        optionalProperty: {\n          title: 'Optional property',\n          type: 'string'\n        }\n      }\n    }\n  }\n}",...AddOptionalProps.parameters?.docs?.source}}},RequiredProperties.parameters={...RequiredProperties.parameters,docs:{...RequiredProperties.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    schema: {\n      title: 'required: [ property ]',\n      type: 'object',\n      required: ['requiredProperty'],\n      properties: {\n        requiredProperty: {\n          title: 'Required Property',\n          type: 'string'\n        },\n        optionalProperty: {\n          title: 'Optional Property',\n          type: 'string'\n        }\n      }\n    }\n  }\n}",...RequiredProperties.parameters?.docs?.source}}},AdditionalProperties.parameters={...AdditionalProperties.parameters,docs:{...AdditionalProperties.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    data: {\n      additionalProperty: 'property without schema'\n    },\n    schema: {\n      type: 'object'\n    }\n  }\n}",...AdditionalProperties.parameters?.docs?.source}}},AdditionalPropertiesFalse.parameters={...AdditionalPropertiesFalse.parameters,docs:{...AdditionalPropertiesFalse.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    data: {\n      additionalProperty: 'property without schema'\n    },\n    schema: {\n      title: 'additionalProperties: false',\n      type: 'object',\n      additionalProperties: false\n    } as JsonSchema\n  }\n}",...AdditionalPropertiesFalse.parameters?.docs?.source}}},AdditionalPropertiesSchema.parameters={...AdditionalPropertiesSchema.parameters,docs:{...AdditionalPropertiesSchema.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    data: {\n      additionalProperty: 'property without schema'\n    },\n    validate: true,\n    schema: {\n      title: 'additionalProperties: { maxLength }',\n      type: 'object',\n      additionalProperties: {\n        type: 'string',\n        maxLength: 10\n      }\n    }\n  }\n}",...AdditionalPropertiesSchema.parameters?.docs?.source}}},EditJson.parameters={...EditJson.parameters,docs:{...EditJson.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    data: {\n      additionalProperty: 'property without schema'\n    },\n    schema: {\n      type: 'object',\n      title: 'options: { editJson: { enabled: true } }',\n      description: 'Using an object with a title will switch actions for optional properties to be placed in the actions-icon besides its title. Inline delete options are moved into their panel for a cleaner ui. Using EditJson action from the actions panel will allow the user to add additional data in json format.',\n      options: {\n        editJson: {\n          enabled: true\n        }\n      },\n      additionalProperties: {\n        type: 'string'\n      }\n    }\n  }\n}",...EditJson.parameters?.docs?.source}}},OneOfObject.parameters={...OneOfObject.parameters,docs:{...OneOfObject.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    schema: {\n      oneOf: [{\n        type: 'object',\n        title: 'First Option',\n        required: ['one'],\n        properties: {\n          one: {\n            type: 'string',\n            title: 'Property String'\n          }\n        }\n      }, {\n        type: 'object',\n        title: 'Second Option',\n        required: ['one'],\n        properties: {\n          one: {\n            type: 'number',\n            title: 'Property Number'\n          }\n        }\n      }]\n    } as JsonSchema\n  }\n}",...OneOfObject.parameters?.docs?.source}}},InvalidOneOfObject.parameters={...InvalidOneOfObject.parameters,docs:{...InvalidOneOfObject.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    data: {\n      one: 'input data'\n    },\n    schema: {\n      oneOf: [{\n        type: 'object',\n        title: 'First Option',\n        required: ['one'],\n        properties: {\n          one: {\n            type: 'string',\n            title: 'Property One'\n          }\n        }\n      }, {\n        type: 'object',\n        title: 'Unselectable Second Option',\n        required: ['one'],\n        properties: {\n          one: {\n            type: 'string',\n            title: 'Property Two'\n          }\n        }\n      }]\n    } as JsonSchema\n  }\n}",...InvalidOneOfObject.parameters?.docs?.source}}},TypedOneOfObject.parameters={...TypedOneOfObject.parameters,docs:{...TypedOneOfObject.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    schema: {\n      oneOf: [{\n        type: 'object',\n        title: 'Select A',\n        required: ['id', 'one'],\n        properties: {\n          id: {\n            type: 'string',\n            const: 'A'\n          },\n          one: {\n            type: 'string',\n            title: 'Property ID A'\n          }\n        }\n      }, {\n        type: 'object',\n        title: 'Select B',\n        required: ['id', 'one'],\n        properties: {\n          id: {\n            type: 'string',\n            const: 'B'\n          },\n          one: {\n            type: 'string',\n            title: 'Property ID B'\n          }\n        }\n      }]\n    } as JsonSchema\n  }\n}",...TypedOneOfObject.parameters?.docs?.source}}},OneOfProperty.parameters={...OneOfProperty.parameters,docs:{...OneOfProperty.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    data: {\n      id: 'B',\n      one: 'B'\n    },\n    schema: {\n      oneOfProperty: 'id',\n      oneOf: [{\n        type: 'object',\n        title: 'Select A',\n        required: ['id', 'one'],\n        properties: {\n          id: {\n            type: 'string',\n            const: 'A',\n            options: {\n              hidden: true\n            }\n          },\n          one: {\n            type: 'string',\n            title: 'Property ID A'\n          }\n        }\n      }, {\n        type: 'object',\n        title: 'Select B',\n        required: ['id', 'one'],\n        properties: {\n          id: {\n            type: 'string',\n            const: 'B',\n            options: {\n              hidden: true\n            }\n          },\n          one: {\n            type: 'string',\n            minLength: 2,\n            title: 'Property ID B'\n          }\n        }\n      }]\n    } as JsonSchema\n  }\n}",...OneOfProperty.parameters?.docs?.source}}},AllOf.parameters={...AllOf.parameters,docs:{...AllOf.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    validate: true,\n    liveUpdate: true,\n    data: {\n      title: 'five!'\n    },\n    schema: {\n      type: 'object',\n      options: {\n        title: false\n      },\n      required: ['title'],\n      properties: {\n        title: {\n          type: 'string'\n        }\n      },\n      allOf: [{\n        properties: {\n          title: {\n            minLength: 1\n          }\n        }\n      }, {\n        properties: {\n          title: {\n            default: 'title',\n            minLength: 6\n          }\n        }\n      }]\n    } as unknown as JsonSchema\n  }\n}",...AllOf.parameters?.docs?.source}}},AllOfIfThen.parameters={...AllOfIfThen.parameters,docs:{...AllOfIfThen.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    validate: true,\n    liveUpdate: true,\n    schema: {\n      type: 'object',\n      options: {\n        title: false\n      },\n      properties: {\n        title: {\n          type: 'string',\n          default: 'four'\n        }\n      },\n      allOf: [{\n        if: {\n          type: 'object',\n          required: ['title'],\n          properties: {\n            title: {\n              minLength: 4\n            }\n          }\n        },\n        then: {\n          properties: {\n            title: {\n              pattern: '^[0-9]+$',\n              patternExample: 'a string with a length of 4+ should contain only numbers'\n            }\n          }\n        }\n      }]\n    } as JsonSchema\n  }\n}",...AllOfIfThen.parameters?.docs?.source}}},DependenciesList.parameters={...DependenciesList.parameters,docs:{...DependenciesList.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    schema: {\n      title: 'dependencies: { prop: [\"prop\"] }',\n      type: 'object',\n      properties: {\n        one: {\n          title: 'Property One',\n          type: 'string'\n        },\n        two: {\n          title: 'dependency',\n          type: 'string'\n        }\n      },\n      dependencies: {\n        one: ['two']\n      },\n      options: {\n        title: false\n      }\n    } as JsonSchema\n  }\n}",...DependenciesList.parameters?.docs?.source}}},DependenciesListActive.parameters={...DependenciesListActive.parameters,docs:{...DependenciesListActive.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    data: {\n      one: 'input value'\n    },\n    addOptionalProps: false,\n    schema: {\n      title: 'dependencies: { prop: [\"prop\"] }',\n      type: 'object',\n      required: ['one'],\n      properties: {\n        one: {\n          title: 'Property One',\n          type: 'string'\n        },\n        two: {\n          title: 'dependency',\n          type: 'string'\n        }\n      },\n      dependencies: {\n        one: ['two']\n      },\n      options: {\n        title: false\n      }\n    } as JsonSchema\n  }\n}",...DependenciesListActive.parameters?.docs?.source}}},Dependencies.parameters={...Dependencies.parameters,docs:{...Dependencies.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    addOptionalProps: false,\n    schema: {\n      title: 'dependencies: { prop: { schema } }',\n      type: 'object',\n      properties: {\n        one: {\n          title: 'Property One',\n          type: 'string'\n        }\n      },\n      dependencies: {\n        one: {\n          required: ['two'],\n          properties: {\n            two: {\n              title: 'dependency',\n              type: 'string'\n            }\n          }\n        }\n      },\n      options: {\n        title: false\n      }\n    } as JsonSchema\n  }\n}",...Dependencies.parameters?.docs?.source}}},DependenciesActive.parameters={...DependenciesActive.parameters,docs:{...DependenciesActive.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    addOptionalProps: false,\n    schema: {\n      title: 'dependencies: { prop: { schema } }',\n      type: 'object',\n      required: ['one'],\n      properties: {\n        one: {\n          title: 'Property One',\n          type: 'string'\n        }\n      },\n      dependencies: {\n        one: {\n          required: ['two'],\n          properties: {\n            two: {\n              title: 'dependency',\n              type: 'string'\n            }\n          }\n        }\n      },\n      options: {\n        title: false\n      }\n    } as JsonSchema\n  }\n}",...DependenciesActive.parameters?.docs?.source}}},IfThenElse.parameters={...IfThenElse.parameters,docs:{...IfThenElse.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    addOptionalProps: false,\n    schema: {\n      type: 'object',\n      required: ['trigger'],\n      properties: {\n        trigger: {\n          title: 'Trigger',\n          type: 'boolean',\n          default: false\n        }\n      },\n      if: {\n        required: ['trigger'],\n        properties: {\n          trigger: {\n            const: true\n          }\n        }\n      },\n      then: {\n        properties: {\n          addition: {\n            type: 'string'\n          }\n        }\n      },\n      options: {\n        title: false\n      }\n    } as JsonSchema\n  }\n}",...IfThenElse.parameters?.docs?.source}}},IfThenElseActive.parameters={...IfThenElseActive.parameters,docs:{...IfThenElseActive.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    addOptionalProps: false,\n    schema: {\n      type: 'object',\n      required: ['trigger'],\n      properties: {\n        trigger: {\n          title: 'Trigger',\n          type: 'boolean',\n          default: false\n        }\n      },\n      if: {\n        required: ['trigger'],\n        properties: {\n          trigger: {\n            const: true\n          }\n        }\n      },\n      then: {\n        required: ['addition'],\n        properties: {\n          addition: {\n            type: 'string'\n          }\n        }\n      },\n      options: {\n        title: false\n      }\n    } as JsonSchema\n  }\n}",...IfThenElseActive.parameters?.docs?.source}}},IfThenElseSwitch.parameters={...IfThenElseSwitch.parameters,docs:{...IfThenElseSwitch.parameters?.docs,source:{originalSource:"{\n  args: {\n    theme: 'light',\n    addOptionalProps: false,\n    validate: true,\n    schema: {\n      type: 'object',\n      required: ['switch'],\n      additionalProperties: false,\n      properties: {\n        switch: {\n          title: 'Switch',\n          type: 'boolean',\n          default: false\n        }\n      },\n      if: {\n        required: ['switch'],\n        properties: {\n          switch: {\n            const: false\n          }\n        }\n      },\n      then: {\n        required: ['then', 'number'],\n        properties: {\n          then: {\n            title: 'Then statement',\n            type: 'string'\n          },\n          number: {\n            title: 'Value in Then',\n            type: 'number',\n            minimum: 4\n          }\n        }\n      },\n      else: {\n        required: ['else', 'number'],\n        properties: {\n          else: {\n            title: 'Else statement',\n            type: 'string',\n            enum: ['option a', 'option b']\n          },\n          number: {\n            title: 'Value in Else',\n            type: 'number',\n            maximum: 4\n          }\n        }\n      },\n      options: {\n        title: false\n      }\n    } as unknown as JsonSchema\n  }\n}",...IfThenElseSwitch.parameters?.docs?.source}}}}}]);