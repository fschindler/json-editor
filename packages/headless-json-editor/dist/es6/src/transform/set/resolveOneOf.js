import{isNode}from"../../types";import{create}from"../../node/create";import{getChildNodeIndex}from"../../node/getChildNode";import{deepEqual}from"fast-equals";export function resolveOneOf(e,r,t,n){var o;const d=e.step(t,r.schema,n,r.pointer);let i=getChildNodeIndex(r,t);-1===i&&(i="array"===r.type?parseInt(t):r.children.length);const l=null===(o=r.children[i])||void 0===o?void 0:o.schema;if(null!=l&&deepEqual(d,l))return;const c=[];isNode(r.children[i])&&c.push({type:"delete",node:r.children[i]});const p=Array.isArray(n)?n[parseInt(t)]:n[t];return r.children=[...r.children],r.children[i]=create(e,p,d,`${r.pointer}/${t}`),c.push({type:"create",node:r.children[i]}),c}