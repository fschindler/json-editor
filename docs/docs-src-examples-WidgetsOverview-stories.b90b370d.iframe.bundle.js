"use strict";(self.webpackChunkjson_editor=self.webpackChunkjson_editor||[]).push([[8566],{"./packages/docs/src/examples/WidgetsOverview.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultWidgets:()=>DefaultWidgets,__namedExportsOrder:()=>__namedExportsOrder,default:()=>WidgetsOverview_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),features=__webpack_require__("./packages/docs/src/examples/data/features.ts"),src=__webpack_require__("./packages/headless-json-editor/src/index.ts"),rje_widgets_src=__webpack_require__("./packages/rje-widgets/src/index.ts"),Theme=__webpack_require__("./packages/rje-widgets/src/lib/components/theme/Theme.tsx");__webpack_require__("./node_modules/@uiw/react-codemirror/esm/index.js"),__webpack_require__("./packages/rje-code-widgets/src/lib/useCodeMirrorOnBlur.ts"),__webpack_require__("./packages/react-json-editor/src/index.ts");function createCodeWidgetPlugin({extensions,format}){if("string"!=typeof format)throw new Error(`Format is required to create a code widget. Given: '${format}'`);return{id:`${format}-code-widget`,use:node=>"string"===node.schema.type&&node.schema.format===format,Widget:widget((({node,options,setValue})=>{const[ref]=useCodeMirrorOnBlur(setValue,node.pointer),onChangeListener={};return options.liveUpdate?onChangeListener.onChange=setValue:onChangeListener.ref=ref,_jsxs(Widget.Field,{widgetType:"code",node,options,showDescription:!1,children:[_jsx(Label,{children:options.title}),_jsx(CodeMirror,{value:node.value,basicSetup:options.setup,editable:!1===options.disabled,extensions,height:options.height,minHeight:options.minHeight,maxHeight:options.maxHeight,indentWithTab:options.indentWithTab,placeholder:options.placeholder,readOnly:options.readOnly,theme:options.theme??"light",...onChangeListener}),options.description&&_jsx(Widget.Description,{children:_jsx(Markdown,{children:options.description})})]})}))}}try{createCodeWidgetPlugin.displayName="createCodeWidgetPlugin",createCodeWidgetPlugin.__docgenInfo={description:"",displayName:"createCodeWidgetPlugin",props:{extensions:{defaultValue:null,description:"",name:"extensions",required:!0,type:{name:"Extension[]"}},format:{defaultValue:null,description:"format the widget should register to",name:"format",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/rje-code-widgets/src/lib/codewidget/CodeWidget.tsx#createCodeWidgetPlugin"]={docgenInfo:createCodeWidgetPlugin.__docgenInfo,name:"createCodeWidgetPlugin",path:"packages/rje-code-widgets/src/lib/codewidget/CodeWidget.tsx#createCodeWidgetPlugin"})}catch(__react_docgen_typescript_loader_error){}var JsonWidget=__webpack_require__("./packages/rje-code-widgets/src/lib/jsonwidget/JsonWidget.tsx");const WidgetsOverview_stories={title:"Examples/Widgets"},DefaultWidgets=(()=>{const[editor,setEditor]=(0,react.useState)(),[editorData,setEditorData]=(0,react.useState)(features.a);return(0,react.useEffect)((()=>{window.changeData=()=>setEditorData({text:"mimimi"}),window.getErrors=()=>(0,src.errors)(editor?.getNode()),window.getData=()=>(0,src.json)(editor?.getNode()),window.getState=()=>editor?.getNode()}),[editor,features.a]),console.log("errors",editor?.getErrors()),window.editor=editor,(0,jsx_runtime.jsx)(Theme.Q,{children:(0,jsx_runtime.jsx)(rje_widgets_src.R_,{widgets:[JsonWidget.N8,...rje_widgets_src.DA],editor:setEditor,data:editorData,schema:features.f,validate:!0,liveUpdate:!0})})}).bind({}),__namedExportsOrder=["DefaultWidgets"];DefaultWidgets.parameters={...DefaultWidgets.parameters,docs:{...DefaultWidgets.parameters?.docs,source:{originalSource:"() => {\n  const [editor, setEditor] = useState<Editor>();\n  const [editorData, setEditorData] = useState(data);\n  useEffect(() => {\n    // @ts-ignore\n    window.changeData = () => setEditorData({\n      text: 'mimimi'\n    });\n    // @ts-ignore\n    window.getErrors = () => errors(editor?.getNode());\n    // @ts-ignore\n    window.getData = () => json(editor?.getNode());\n    // @ts-ignore\n    window.getState = () => editor?.getNode();\n  }, [editor, data]);\n  console.log('errors', editor?.getErrors());\n  // @ts-ignore\n  window.editor = editor;\n  return <Theme>\n      <JsonForm widgets={[JsonWidgetPlugin, ...widgets]} editor={setEditor} data={editorData} schema={schema as JsonSchema} validate={true} liveUpdate={true} />\n    </Theme>;\n}",...DefaultWidgets.parameters?.docs?.source}}}}}]);