<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="67" failures="0" errors="0" time="3.008">
  <testsuite name="get" errors="0" failures="0" skipped="0" timestamp="2022-12-04T23:21:42" time="2.106" tests="4">
    <testcase classname="get should return target property for json-pointer" name="get should return target property for json-pointer" time="0.003">
    </testcase>
    <testcase classname="get should return not found error for not matching json-pointer" name="get should return not found error for not matching json-pointer" time="0.001">
    </testcase>
    <testcase classname="get should return target item for json-pointer" name="get should return target item for json-pointer" time="0.001">
    </testcase>
    <testcase classname="get should return nested property for json-pointer" name="get should return nested property for json-pointer" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="set" errors="0" failures="0" skipped="0" timestamp="2022-12-04T23:21:42" time="2.156" tests="29">
    <testcase classname="set should update string value defined on root" name="set should update string value defined on root" time="0.004">
    </testcase>
    <testcase classname="set should replace existing object" name="set should replace existing object" time="0.001">
    </testcase>
    <testcase classname="set should replace existing object on root" name="set should replace existing object on root" time="0.001">
    </testcase>
    <testcase classname="set should add new property to existing parent object" name="set should add new property to existing parent object" time="0.001">
    </testcase>
    <testcase classname="set should add unknown property to existing parent object" name="set should add unknown property to existing parent object" time="0.001">
    </testcase>
    <testcase classname="set should return error if target parent was not found" name="set should return error if target parent was not found" time="0.001">
    </testcase>
    <testcase classname="set should be able to replace object on root property by different type" name="set should be able to replace object on root property by different type" time="0.001">
    </testcase>
    <testcase classname="set array should be able to replace array string item" name="set array should be able to replace array string item" time="0.001">
    </testcase>
    <testcase classname="set array should be able to append string item to array" name="set array should be able to append string item to array" time="0.001">
    </testcase>
    <testcase classname="set array should be able to add string item to specific array index" name="set array should be able to add string item to specific array index" time="0">
    </testcase>
    <testcase classname="set array should return error if array index is not a number" name="set array should return error if array index is not a number" time="0.001">
    </testcase>
    <testcase classname="set array should return update change of array when being replaced" name="set array should return update change of array when being replaced" time="0.001">
    </testcase>
    <testcase classname="set unknown data should add correct schema" name="set unknown data should add correct schema" time="0">
    </testcase>
    <testcase classname="set value oneOf should switch between string and number" name="set value oneOf should switch between string and number" time="0.001">
    </testcase>
    <testcase classname="set object oneOf should switch between object schema" name="set object oneOf should switch between object schema" time="0.002">
    </testcase>
    <testcase classname="set object oneOf should not replace nodes on value update" name="set object oneOf should not replace nodes on value update" time="0.001">
    </testcase>
    <testcase classname="set array oneOf should change schema if type of values changes" name="set array oneOf should change schema if type of values changes" time="0.002">
    </testcase>
    <testcase classname="set array oneOf should change schema if type of object changes" name="set array oneOf should change schema if type of object changes" time="0.001">
    </testcase>
    <testcase classname="set array oneOf should change schema if nested properties change" name="set array oneOf should change schema if nested properties change" time="0">
    </testcase>
    <testcase classname="set object dependencies should activate deactivated dynamic schema" name="set object dependencies should activate deactivated dynamic schema" time="0.001">
    </testcase>
    <testcase classname="set object dependencies should deactivate activated dynamic schema" name="set object dependencies should deactivate activated dynamic schema" time="0.001">
    </testcase>
    <testcase classname="set object dependencies should activate deactivated dynamic schema (not on root)" name="set object dependencies should activate deactivated dynamic schema (not on root)" time="0.001">
    </testcase>
    <testcase classname="set object dependencies should not replace dependency node" name="set object dependencies should not replace dependency node" time="0.001">
    </testcase>
    <testcase classname="set object dependencies should not replace dependent node" name="set object dependencies should not replace dependent node" time="0.001">
    </testcase>
    <testcase classname="set object if-then-else should update conditional value" name="set object if-then-else should update conditional value" time="0.001">
    </testcase>
    <testcase classname="set object if-then-else should change conditional value to &quot;then&quot; case" name="set object if-then-else should change conditional value to &quot;then&quot; case" time="0.001">
    </testcase>
    <testcase classname="set object if-then-else should change conditional value to &quot;else&quot; case" name="set object if-then-else should change conditional value to &quot;else&quot; case" time="0">
    </testcase>
    <testcase classname="set object if-then-else should only remove &quot;then&quot;-schema on missing &quot;else&quot;" name="set object if-then-else should only remove &quot;then&quot;-schema on missing &quot;else&quot;" time="0.001">
    </testcase>
    <testcase classname="set scenarios should not lose oneOf objects when setting a value" name="set scenarios should not lose oneOf objects when setting a value" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="validate" errors="0" failures="0" skipped="0" timestamp="2022-12-04T23:21:44" time="0.164" tests="5">
    <testcase classname="validate should add property errors" name="validate should add property errors" time="0.003">
    </testcase>
    <testcase classname="validate should update property errors" name="validate should update property errors" time="0.001">
    </testcase>
    <testcase classname="validate should validate from pointer only" name="validate should validate from pointer only" time="0">
    </testcase>
    <testcase classname="validate async validation should perform async validation" name="validate async validation should perform async validation" time="0.001">
    </testcase>
    <testcase classname="validate async validation should assign validation error once only" name="validate async validation should assign validation error once only" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="docs" errors="0" failures="0" skipped="0" timestamp="2022-12-04T23:21:44" time="0.162" tests="1">
    <testcase classname="docs should log list of strings" name="docs should log list of strings" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="trace" errors="0" failures="0" skipped="1" timestamp="2022-12-04T23:21:44" time="0.139" tests="2">
    <testcase classname="trace should return all nodes along the path" name="trace should return all nodes along the path" time="0.003">
    </testcase>
    <testcase classname="trace should throw if the path is invalid" name="trace should throw if the path is invalid" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="create" errors="0" failures="0" skipped="1" timestamp="2022-12-04T23:21:44" time="0.147" tests="13">
    <testcase classname="create should create a node" name="create should create a node" time="0.002">
    </testcase>
    <testcase classname="create should support null properties" name="create should support null properties" time="0">
    </testcase>
    <testcase classname="create should create a node tree with additionalProperties set" name="create should create a node tree with additionalProperties set" time="0.001">
    </testcase>
    <testcase classname="create should maintain property order of json-schema" name="create should maintain property order of json-schema" time="0.001">
    </testcase>
    <testcase classname="create object errors should return an error node for undefined and invalid data" name="create object errors should return an error node for undefined and invalid data" time="0">
      <skipped/>
    </testcase>
    <testcase classname="create object errors should not return schema as error for undefined but valid data" name="create object errors should not return schema as error for undefined but valid data" time="0">
    </testcase>
    <testcase classname="create dynamic dependencies should return inactive dynamic schema for missing dependency" name="create dynamic dependencies should return inactive dynamic schema for missing dependency" time="0.001">
    </testcase>
    <testcase classname="create dynamic dependencies should return active dynamic schema if dependency has value" name="create dynamic dependencies should return active dynamic schema if dependency has value" time="0.001">
    </testcase>
    <testcase classname="create dynamic dependencies should return value of dependency" name="create dynamic dependencies should return value of dependency" time="0">
    </testcase>
    <testcase classname="create dynamic if-else-then should add then-schema for valid if-schema" name="create dynamic if-else-then should add then-schema for valid if-schema" time="0.001">
    </testcase>
    <testcase classname="create dynamic if-else-then should add else-schema for invalid if-schema" name="create dynamic if-else-then should add else-schema for invalid if-schema" time="0.001">
    </testcase>
    <testcase classname="create dynamic if-else-then should not add then-schema for invalid if-schema" name="create dynamic if-else-then should not add then-schema for invalid if-schema" time="0">
    </testcase>
    <testcase classname="create dynamic if-else-then should not create a node for non-matching else case" name="create dynamic if-else-then should not create a node for non-matching else case" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="move" errors="0" failures="0" skipped="0" timestamp="2022-12-04T23:21:44" time="0.137" tests="3">
    <testcase classname="move should move item to given array index" name="move should move item to given array index" time="0.003">
    </testcase>
    <testcase classname="move should move item in root array" name="move should move item in root array" time="0">
    </testcase>
    <testcase classname="move should append item if target index is too large" name="move should append item if target index is too large" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="remove" errors="0" failures="0" skipped="0" timestamp="2022-12-04T23:21:44" time="0.133" tests="2">
    <testcase classname="remove array should remove item in list" name="remove array should remove item in list" time="0.003">
    </testcase>
    <testcase classname="remove object should remove property from object" name="remove object should remove property from object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="buildPathsMap" errors="0" failures="0" skipped="0" timestamp="2022-12-04T23:21:45" time="0.127" tests="5">
    <testcase classname="buildPathsMap should return path as map" name="buildPathsMap should return path as map" time="0.001">
    </testcase>
    <testcase classname="buildPathsMap should return multiple paths in map" name="buildPathsMap should return multiple paths in map" time="0">
    </testcase>
    <testcase classname="buildPathsMap should merge share paths in map" name="buildPathsMap should merge share paths in map" time="0.001">
    </testcase>
    <testcase classname="buildPathsMap should have no duplicated paths in map" name="buildPathsMap should have no duplicated paths in map" time="0">
    </testcase>
    <testcase classname="buildPathsMap should set return statements to nested paths" name="buildPathsMap should set return statements to nested paths" time="0">
    </testcase>
  </testsuite>
  <testsuite name="updatePath" errors="0" failures="0" skipped="0" timestamp="2022-12-04T23:21:45" time="0.108" tests="3">
    <testcase classname="updatePath should update pointer of passed node" name="updatePath should update pointer of passed node" time="0">
    </testcase>
    <testcase classname="updatePath should recursively update arrays" name="updatePath should recursively update arrays" time="0">
    </testcase>
    <testcase classname="updatePath should recursively update objects" name="updatePath should recursively update objects" time="0.001">
    </testcase>
  </testsuite>
</testsuites>