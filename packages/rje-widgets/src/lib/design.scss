@use 'sass:math';

$unit: 8 !default;
$border-radius: 4px !default;
$border-width: 1px !default;
$base-font-size: 16 !default;
$color-black: rgb(0, 0, 0) !default;
$color-white: rgb(255, 255, 255) !default;

$color-light-grey-1: rgb(202, 205, 206) !default;
$color-light-grey-2: rgb(120, 123, 124) !default;
$color-light-fill: rgba(255, 255, 255, 0.6) !default;
$color-light-stroke: rgba(255, 255, 255, 0.7) !default;
$color-light-error: rgb(174, 36, 45) !default;
$color-light-warning: rgb(231, 171, 15) !default;
$color-light-success: rgb(37, 165, 65) !default;

$color-dark-grey-1: rgb(71, 72, 73) !default;
$color-dark-grey-2: rgb(120, 123, 124) !default;
$color-dark-fill: rgba(255, 255, 255, 0.05) !default;
$color-dark-stroke: rgba(255, 255, 255, 0.1) !default;
$color-dark-error: rgb(241, 31, 44) !default;
$color-dark-warning: rgb(248, 193, 49) !default;
$color-dark-success: rgb(58, 213, 55) !default;

$shadow-elevated:
    0 1px 3px rgb(0, 0, 0, 0.1),
    0 6px 12px rgb(0, 0, 0, 0.08);

@mixin icon-font() {
    user-select: none;
    max-width: 2em;
    font-family: 'Icon';
    font-weight: normal;
    font-style: normal;
    line-height: 1;
    letter-spacing: normal;
    text-transform: none;
    display: inline-block;
    white-space: nowrap;
    word-wrap: normal;
    direction: ltr;
    -moz-font-feature-settings: 'liga';
    -moz-osx-font-smoothing: grayscale;
}

@mixin border-style($color) {
    border: $border-width solid $color;
    border-radius: $border-radius;
    box-sizing: border-box;
}

@mixin surface-modal($theme: 'light') {
    @if $theme == 'dark' {
        @include border-style($color-dark-stroke);
        background: $color-black;
    } @else if $theme == 'light' {
        @include border-style($color-light-stroke);
        background: $color-white;
    }
}

@mixin elevated($theme: 'light') {
    @if $theme == 'dark' {
        @include border-style($color-dark-grey-1);
        background: $color-dark-fill;
    } @else if $theme == 'light' {
        @include border-style($color-light-grey-1);
        background: $color-light-fill;
    }
}

@mixin flat($theme: 'light') {
    @if $theme == 'dark' {
        @include border-style($color-dark-grey-1);
        background: $color-dark-fill;
    } @else if $theme == 'light' {
        @include border-style($color-light-grey-1);
        background: $color-light-fill;
    }
}

@mixin input-elevated($theme: 'light') {
    @if $theme == 'dark' {
        @include border-style($color-dark-grey-1);
        background: $color-dark-fill;
        caret-color: rgb(var(--rje-color-dark-primary));
    } @else if $theme == 'light' {
        @include border-style($color-light-grey-1);
        background: $color-light-fill;
        caret-color: rgb(var(--rje-color-light-primary));
    }
    outline: 0;
}

@mixin input-flat($theme: 'light') {
    @if $theme == 'dark' {
        @include border-style($color-dark-grey-1);
        background: $color-light-fill;
        caret-color: rgb(var(--rje-color-light-primary));
    } @else if $theme == 'light' {
        @include border-style($color-light-grey-1);
        background: $color-dark-fill;
        caret-color: rgb(var(--rje-color-dark-primary));
    }
    outline: 0;
}

@mixin primary-elevated($theme: 'light') {
    @if $theme == 'dark' {
        @include border-style($color-dark-stroke);
        background: rgb(var(--rje-color-dark-primary));
    } @else if $theme == 'light' {
        @include border-style($color-light-stroke);
        background: rgb(var(--rje-color-light-primary));
    }
}

@mixin primary-flat($theme: 'light') {
    @if $theme == 'dark' {
        @include border-style($color-dark-stroke);
        background: $color-dark-grey-1;
    } @else if $theme == 'light' {
        @include border-style($color-light-stroke);
        background: $color-light-grey-1;
    }
}

@mixin clickable() {
    &:not([disabled]) {
        cursor: pointer;
        pointer-events: all;
    }
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    user-select: none;
    outline: 0;
}

@function em($px, $base: $base-font-size) {
    @return math.div($px, $base) * 1em;
}
