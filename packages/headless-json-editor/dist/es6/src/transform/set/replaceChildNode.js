import{isJSONError}from"../../types";import{create}from"../../node/create";import{getChildNodeIndex}from"../../node/getChildNode";import{deepEqual}from"fast-equals";import{getSchemaOfChild}from"./getSchemaOfChild";export function replaceChildNode(e,r,t,o){var d;const p=getSchemaOfChild(e,r,t.property,o);if(isJSONError(p))return p;const i=[],h=getChildNodeIndex(r,t.property),n=create(e,o,p,t.pointer);return r.children[h]=n,n.type===t.type&&(n.id=t.id),deepEqual(t.schema,n.schema)?(i.push({type:"update",node:n}),t.children.forEach((e=>i.push({type:"delete",node:e}))),null===(d=n.children)||void 0===d||d.forEach((e=>i.push({type:"create",node:e}))),i):(i.push({type:"delete",node:t}),i.push({type:"create",node:n}),i)}